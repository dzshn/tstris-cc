import { RotationSystem } from "./engine";
import { Coord, Piece, PieceType } from "./types";

type Kicks = Record<number, Coord[]>

const SHAPES: Record<PieceType, Coord[][]> = {
    [PieceType.I]: [
        [[1, 0], [1, 1], [1, 2], [1, 3]],
        [[0, 2], [1, 2], [2, 2], [3, 2]],
        [[2, 0], [2, 1], [2, 2], [2, 3]],
        [[0, 1], [1, 1], [2, 1], [3, 1]],
    ],
    [PieceType.J]: [
        [[0, 0], [1, 0], [1, 1], [1, 2]],
        [[0, 1], [0, 2], [1, 1], [2, 1]],
        [[1, 0], [1, 1], [1, 2], [2, 2]],
        [[0, 1], [1, 1], [2, 0], [2, 1]],
    ],
    [PieceType.L]: [
        [[0, 2], [1, 0], [1, 1], [1, 2]],
        [[0, 1], [1, 1], [2, 1], [2, 2]],
        [[1, 0], [1, 1], [1, 2], [2, 0]],
        [[0, 0], [0, 1], [1, 1], [2, 1]],
    ],
    [PieceType.O]: [
        [[0, 1], [0, 2], [1, 1], [1, 2]],
        [[0, 1], [0, 2], [1, 1], [1, 2]],
        [[0, 1], [0, 2], [1, 1], [1, 2]],
        [[0, 1], [0, 2], [1, 1], [1, 2]],
    ],
    [PieceType.S]: [
        [[0, 1], [0, 2], [1, 0], [1, 1]],
        [[0, 1], [1, 1], [1, 2], [2, 2]],
        [[1, 1], [1, 2], [2, 0], [2, 1]],
        [[0, 0], [1, 0], [1, 1], [2, 1]],
    ],
    [PieceType.T]: [
        [[0, 1], [1, 0], [1, 1], [1, 2]],
        [[0, 1], [1, 1], [1, 2], [2, 1]],
        [[1, 0], [1, 1], [1, 2], [2, 1]],
        [[0, 1], [1, 0], [1, 1], [2, 1]],
    ],
    [PieceType.Z]: [
        [[0, 0], [0, 1], [1, 1], [1, 2]],
        [[0, 2], [1, 1], [1, 2], [2, 1]],
        [[1, 0], [1, 1], [2, 1], [2, 2]],
        [[0, 1], [1, 0], [1, 1], [2, 0]],
    ],
};

const KICKS: Kicks = {
    [0 * 4 + 1]: [[+0, -1], [-1, -1], [+2, +0], [+2, -1]],
    [0 * 4 + 3]: [[+0, +1], [-1, +1], [+2, +0], [+2, +1]],
    [1 * 4 + 0]: [[+0, +1], [+1, +1], [-2, +0], [-2, +1]],
    [1 * 4 + 2]: [[+0, +1], [+1, +1], [-2, +0], [-2, +1]],
    [2 * 4 + 1]: [[+0, -1], [-1, -1], [+2, +0], [+2, -1]],
    [2 * 4 + 3]: [[+0, +1], [-1, +1], [+2, +0], [+2, +1]],
    [3 * 4 + 0]: [[+0, -1], [+1, -1], [-2, +0], [-2, -1]],
    [3 * 4 + 2]: [[+0, -1], [+1, -1], [-2, +0], [-2, -1]],
};

const I_KICKS: Kicks = {
    [0 * 4 + 1]: [[+0, -2], [+0, +1], [+1, -2], [-2, +1]],
    [0 * 4 + 3]: [[+0, -1], [+0, +2], [-2, -1], [+1, +2]],
    [1 * 4 + 0]: [[+0, +2], [+0, -1], [-1, +2], [+2, -1]],
    [1 * 4 + 2]: [[+0, -1], [+0, +2], [-2, -1], [+1, +2]],
    [2 * 4 + 1]: [[+0, +1], [+0, -2], [+2, +1], [-1, +2]],
    [2 * 4 + 3]: [[+0, +2], [+0, -1], [-1, +2], [+2, -1]],
    [3 * 4 + 0]: [[+0, +1], [+0, -2], [+2, +1], [-1, -2]],
    [3 * 4 + 2]: [[+0, -2], [+0, +1], [+1, -2], [-2, +1]],
};

export default class SRS extends RotationSystem {
    spawn(type: PieceType): Piece {
        const minos = SHAPES[type][0];
        let x = Math.floor(this.height / 2) - 2;
        const y = Math.floor((this.width + 3) / 2) - 3;
        if (!this.overlaps({ minos, x, y }) && !this.overlaps({ minos, x: x + 1, y }))
            x++;

        return { type, x, y, r: 0, minos };
    }

    rotate(piece: Piece, turns: number) {
        const r = (piece.r + turns) % 4;
        const minos = SHAPES[piece.type][r];

        if (!this.overlaps({ ...piece, minos })) {
            piece.r = r;
            piece.minos = minos;
            return;
        }

        const table = piece.type === PieceType.I ? I_KICKS : KICKS;
        const kicks = table[piece.r * 4 + r];
        if (!kicks)
            return;

        for (const [x, y] of kicks) {
            if (!this.overlaps({ minos, x: piece.x + x, y: piece.y + y })) {
                piece.x += x;
                piece.y += y;
                piece.r = r;
                piece.minos = minos;
                break;
            }
        }
    }
}
